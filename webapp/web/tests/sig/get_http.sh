#!/bin/bash

mkdir -p ${cfgdir}

# Create script to set interfaces and run the SIG
file=${cfgdir}/run_sig${IA}.sh
cat >$file <<EOL
#!/bin/bash

# Webapp SIG Client Test

# Do not edit, this file is autogenerated by webapp.

# WARNING: the SIG binary must be built beforehand to this location:
# ${APPS_ROOT}/sig

# Set the linux capabilities on the binary:
sudo setcap cap_net_admin+eip ${APPS_ROOT}/sig

# Enable routing:
sudo sysctl net.ipv4.conf.default.rp_filter=0
sudo sysctl net.ipv4.conf.all.rp_filter=0
sudo sysctl net.ipv4.ip_forward=1

# Create a dummy interface:
sudo modprobe dummy

sudo ip link add dummy${IdRemote} type dummy
sudo ip addr add 172.16.0.${IdRemote}/32 brd + dev dummy${IdRemote} label dummy${IdRemote}:0

# Add the routing rules for the SIG:
sudo ip rule add to 172.16.${IdLocal}.0/24 lookup ${IdRemote} prio ${IdRemote}

# Start the SIG with the following command:
${APPS_ROOT}/sig -config=${cfgdir}/sig${IA}.config > ${SCION_LOGS}/sig${IA}-1.log 2>&1 &

# Show the ip rules and routes
sudo ip rule show
sudo ip route show table ${IdLocal}
sudo ip route show table ${IdRemote}

# Add a client on host Local:
sudo ip link add client type dummy
sudo ip addr add 172.16.${IdLocal}.1/24 brd + dev client label client:0

# The 'curl --interface' command will be run by webapp...
EOL
cat $file

# Create script to test the running SIG
file=${cfgdir}/test_sig${IA}.sh
cat >$file <<EOL
#!/bin/bash
curl --interface 172.16.${IdLocal}.1 172.16.${IdRemote}.1:${ServePort}/sighello.html
EOL
cat $file
